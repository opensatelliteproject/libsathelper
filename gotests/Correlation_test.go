package SatHelper

import (
	"github.com/opensatelliteproject/libsathelper"
	"testing"
)

/*
	Generator function in python:

    word0 = 0xDEADBEEF
    word1 = 0xAAC00FFE
    word2 = 0xAABBCCDDEEFF0055

    word0b = format(word0, '#0{}b'.format(10))[2:]
    word1b = format(word1, '#0{}b'.format(10))[2:]
    word2b = format(word2, '#0{}b'.format(10))[2:]


    data = []
    for i in range(l):
      data.append(0)

    for i in range(l):
      data[i] += 128
      data[i] &= 0xFF

    for i in range(100,100 + len(word0b)):
      data[i] = 255 if word0b[i-100] == "0" else 0

    for i in range(500, 500 + len(word1b)):
      data[i] = 255 if word1b[i-500] == "0" else 0

    for i in range(800, 800 + len(word2b)):
      dat
*/

const CorrelationTestSize uint = 1024

const word0 uint = 0xDEADBEEF
const word1 uint = 0xAAC00FFE
const word2 uint64 = 0xAABBCCDDEEFF0055
const correlationPositionWord0 uint = 100
const correlationPositionWord1 uint = 500
const correlationPositionWord2 uint = 800

var correlationPosition = []uint{
	correlationPositionWord0,
	correlationPositionWord1,
	correlationPositionWord2,
}

var testData = []byte{
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 0, 0, 255, 0, 0, 0, 0, 255, 0, 255, 0, 255,
	0, 0, 255, 0, 0, 255, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255,
	0, 0, 0, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 0, 255, 0, 255, 0, 255, 0, 255, 0, 0, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 0, 0, 255, 0, 0,
	0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 0, 0, 255, 0,
	0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 255, 0, 255, 0, 255, 0,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
}

func TestCorrelation(t *testing.T) {
	data := make([]uint8, CorrelationTestSize)
	correlator := [3]SatHelper.Correlator{}
	for i := 0; i < 3; i++ {
		correlator[i] = SatHelper.NewCorrelator()
	}
	correlator[0].AddWord(word0)
	correlator[1].AddWord(word1)
	correlator[2].AddWord(word2)

	copy(data, testData)

	t.Log("  | Testing with plain data.")

	for i := 0; i < 3; i++ {
		correlator[i].Correlate(&data[0], CorrelationTestSize)
		if correlator[i].GetHighestCorrelationPosition() != correlationPosition[i] {
			t.Errorf("    - Word %d correlation in wrong position. Expected %d got %d\n", i, correlationPosition[i], correlator[i].GetHighestCorrelationPosition())
		}
		t.Logf("    | Correlation position for word %d: %d with %d\n", i, correlator[i].GetHighestCorrelationPosition(), correlator[i].GetHighestCorrelation())
	}

	t.Log("  | Testing with gaussian noise.")
	for i := 0; i < int(CorrelationTestSize); i++ {
		v := int(testData[i])
		v += int(genDistributedRandom())
		if v > 0xFF {
			v = 0xFF
		}
		if v < 0 {
			v = 0
		}
		data[i] = uint8(v)
	}

	for i := 0; i < 3; i++ {
		correlator[i].Correlate(&data[0], CorrelationTestSize)
		if correlator[i].GetHighestCorrelationPosition() != correlationPosition[i] {
			t.Errorf("    - Word %d correlation in wrong position. Expected %d got %d\n", i, correlationPosition[i], correlator[i].GetHighestCorrelationPosition())
		}
		t.Logf("    | Correlation position for word %d: %d with %d\n", i, correlator[i].GetHighestCorrelationPosition(), correlator[i].GetHighestCorrelation())
	}
}
